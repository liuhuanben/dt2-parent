<?xml version="1.0" encoding="UTF-8" ?>
<!--    slf4j: 日志门面   log4j2: 日志实现
直接使用log4j2可以 一旦出现更换等操作，需要改动大量的代码，比如每个类前面需要 声明Loger 这部分
搭配slf4j使用，则在需要打印日志的地方 类上方加上注解@Slf4j即可，在配合log4j2的实现，日志打印格式 规则等 更改时只需要替换 依赖和配置文件即可
-->
<!--使用方式
类上面加注解@Slf4j
// info
log.info("请求地址: "+ request.getRequestURI());
// 占位符的使用{}
log.info("<< | {} | 返回给调用方的响应的报文:\n {}", msgId, JSON.toJSONString(sxResponse));
// << | msgId | 返回给调用方的响应的报文:\n JSON.toJSONString(sxResponse)", msgId, JSON.toJSONString(sxResponse)
-->
<!--
    status="warn" 日志框架本身的输出日志级别，可以修改为debug
    monitorInterval="5" 自动加载配置文件的间隔时间，不低于 5秒；生产环境中修改配置文件，是热更新，无需重启应用
 -->
<configuration status="warn" monitorInterval="5">
    <!--
    集中配置属性进行管理
    使用时通过:${ }
    -->
    <properties>
        <property name="LOG_HOME">D:\a_change_file\logs_idea</property>
    </properties>

    <!-- 日志处理 -->
    <Appenders>
        <!-- 控制台输出 appender，SYSTEM_OUT输出黑色，SYSTEM_ERR输出红色 -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n" />
        </Console>

        <!-- 日志文件输出 appender -->
        <File name="file" fileName="${LOG_HOME}/myfile.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />
        </File>

        <!-- 使用随机读写流的日志文件输出 appender，性能提高 -->
        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/myAcclog.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n" />
        </RandomAccessFile>

        <!-- 按照一定规则拆分的日志文件的appender -->  <!-- 拆分后的文件 -->

        <!-- filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd-HH-mm}-%i.log"> -->
        <RollingFile name="rollingFile" fileName="${LOG_HOME}/myrollog.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd}-%i.log">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY" />
            <!-- 日志消息格式 -->
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %msg%n" />
            <Policies>
                <!-- 在系统启动时，出发拆分规则，生产一个新的日志文件 -->
                <OnStartupTriggeringPolicy />
                <!-- 按照文件大小拆分，10MB -->
                <SizeBasedTriggeringPolicy size="2MB" />
                <!-- 按照时间节点拆分，规则根据filePattern定义的 -->
                <TimeBasedTriggeringPolicy />
            </Policies>
            <!-- 在同一个目录下，文件的个限定为 30个，超过进行覆盖 -->
            <DefaultRolloverStrategy max="10" />
        </RollingFile>

    </Appenders>

    <!-- logger 定义 -->
    <Loggers>
        <!-- 使用 rootLogger 配置

        通过改变配置文件中的日志级别,就能打印出不同的日志.
        eg: 有的场景只是你在debug的时候看看,所以你代码写log.debug(),有的信息你经常想看到,所以你代码写log.info().
        由于级别info>debug,所以在配置文件中设置级别为debug时能看到debug+info的信息,设置级别为info时就可以不看到debug的信息.
        在log4j2中, 共有8个级别,按照从低到高为:

        ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
        All:最低等级的,用于打开所有日志记录.
        Trace:是追踪,就是程序推进一下.
        Debug:指出细粒度信息事件对调试应用程序是非常有帮助的.
        Info:消息在粗粒度级别上突出强调应用程序的运行过程.
        Warn:输出警告及warn以下级别的日志.
        Error:输出错误信息日志.
        Fatal:输出每个严重的错误事件将会导致应用程序的退出的日志.
        OFF:最高等级的，用于关闭所有日志记录.
        -->
        <Root level="warn">
            <!-- 指定日志使用上面哪个处理器 -->
            <AppenderRef ref="Console" />
            <AppenderRef ref="file" />
            <AppenderRef ref="rollingFile" />
            <AppenderRef ref="accessFile" />
        </Root>
    </Loggers>
</configuration>