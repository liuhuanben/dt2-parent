<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>dt2-parent</artifactId>
        <groupId>com.jqcx</groupId>
        <version>v2.0</version>
    </parent>

    <groupId>com.jqcx</groupId>
    <artifactId>dt2-server-consumer</artifactId>
    <name>dt2-server-consumer</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <maven.compiler.target>11</maven.compiler.target>
        <maven.compiler.source>11</maven.compiler.source>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
    <dependencies>
        <dependency>
            <groupId>com.jqcx</groupId>
            <artifactId>dt2-sa-common-api</artifactId>
        </dependency>
        <dependency>
            <artifactId>dt2-sa-common-utils</artifactId>
            <groupId>com.jqcx</groupId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>

        </dependency>
        <!--日志 采用slf4j + log4j2 据评论说此种日志使用相对 其他日志框架 便捷  高效-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>
        <!--@Slf4j 注解使用日志  需要lombok依赖支持 否则 Logger logger = LoggerFactory.getLogger(getClass()); 也可以-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web-services</artifactId>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <version>2.5.4</version>
        </dependency>-->
        <!--其中dubbo依赖包可在maven仓库中拉取dubbo-spring-boot-starter最新版本(坑点一)
            请不要直接引入0.1.0版本或0.2.0版本：前者适用于springboot1.x版本，后者适用于springboot2.1.x版本
            引入zookeeper依赖包说明（坑点二）：
            zkclient适用于dubbo2.6版本及之前的版本，dubbo更高的版本已经使用apache-curator了。
            而我们上面导的版本为2.7之后的dubbo版本，因此这里需要特别注意。
-->
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.dubbo</groupId>
            <artifactId>dubbo-registry-nacos</artifactId>
        </dependency>
        <dependency>
            <groupId>com.alibaba.nacos</groupId>
            <artifactId>nacos-client</artifactId>
        </dependency>
        <dependency>
            <groupId>cn.dev33</groupId>
            <artifactId>sa-token-spring-boot-starter</artifactId>
        </dependency>
    </dependencies>
    <build>
        <plugins>
           <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.6.1</version>
           </plugin>
           <plugin>
             <groupId>org.apache.maven.plugins</groupId>
             <artifactId>maven-compiler-plugin</artifactId>
             <version>3.1</version>
             <configuration>
                 <source>11</source> <!-- 源代码使用的JDK版本 -->
                 <target>11</target> <!-- 需要生成的目标class文件的编译版本 -->
                 <encoding>UTF-8</encoding><!-- 字符集编码 -->
                 <compilerArgument>-Xlint:unchecked</compilerArgument>   <!-- -Xlint:unchecked 重新编译你-->
             </configuration>
            </plugin>
            <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-jar-plugin</artifactId>
                 <version>3.1.0</version>
                 <configuration>
                   <archive>
                         <manifest>
                             <!-- 指定入口函数 -->
                             <mainClass>com.jqcx.Dt2ServerConsumerApplication</mainClass>
                             <!-- 是否添加依赖的jar路径配置 -->
                             <addClasspath>true</addClasspath>
                             <!-- 依赖的jar包存放位置，和生成的jar放在同一级目录下 -->
                             <classpathPrefix>lib/</classpathPrefix>
                         </manifest>
                         <manifestEntries>
                             <Class-Path>./</Class-Path>
                         </manifestEntries>
                     </archive>
                     <!-- 不打包com.yh.excludes下面的所有类
                     <excludes>com/yh/excludes/*</excludes>-->
                 </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
