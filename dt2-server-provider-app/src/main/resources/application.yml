spring:
  servlet:
    multipart:
      max-file-size: 5MB #单位必须大写MB或不写(即为B)
      max-request-size: 10MB
  autoconfigure:
    #排除druid的自动配置  或者在启动类上面排除 @SpringBootApplication(exclude= {DruidDataSourceAutoConfigure.class})
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure
  datasource:
    # 指定使用的Druid数据源
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      # 初始连接数 看实际并发量 较高的话 设置稍微高一些并保持和最小连接数保持一致最好，像后台管理可以尽量
      initial-size: 5
      # 最小连接池数量
      min-idle: 10
      # 最大连接池数量
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      max-evictable-idle-time-millis: 900000
      # 配置检测连接是否有效  此处执行 sql检验，会稍微影响效率，不配置，则会调用ping命令去检测。效率更好 ，建议不配置
      validation-query: select 1 from dual
      filters: stat,wall
      #web-stat-filter:   # 这玩意有空研究下 druid的 过滤器 和servlet Filter 类似
      #          enabled: true
    #动态数据源（多个）  切换时，使用注解 @DS(master)
    dynamic:
      #设置Modena的数据源 或者数据源组，默认值即为master
      primary: master
      strict: false #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候会抛出异常,不启动则使用默认数据源.
      datasource:
        master:
          driver-class-name: com.mysql.cj.jdbc.Driver
          url: jdbc:mysql://172.16.88.180:3306/company_project?useUnicode=true&useSSL=false&characterEncoding=utf8
          username: upload
          password: O26HwApN
        slave:
          url: jdbc:postgresql://172.16.88.231:5432/jqycdb
          driver-class-name: org.postgresql.Driver
          username: jqyc
          password: ZfaUkoMb3tR50tP4
  data:
    mongodb:
      host: 172.16.88.231
      database: jqcx_v2
      username: jqcx_v2
      password: jqcx_v2
      port: 27017 #默认也是 27017
mybatis-plus:
  #外部化xml配置
  #  config-location: classpath:mybatis-config.xml
  #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署
  #  configuration-properties: classpath:mybatis/config.properties
  #MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名  多个package用逗号或者分号分隔 如果不配置,需要在dao成类上用注解@Mapper
  #  type-aliases-package: net.xinhuamm.noah.api.model.entity,net.xinhuamm.noah.api.model.dto
  #枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性
  #  type-enums-package: com.baomidou.mybatisplus.samples.quickstart.enums
  #项目启动会检查xml配置存在(只在开发时候打开)
  check-config-location: false
  #SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句,REUSE：该执行器类型会复用预处理语句,BATCH：该执行器类型会批量执行所有的更新语句
  default-executor-type: SIMPLE
  #mapper-locations: classpath:mybatis/**/*Mapper.xml
  #xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  #在classpath前添加星号可以使项目热加载成功<br>  # 自定义xml sql文件需要配置这个
  mapper-locations: classpath*:/mapper/*/*.xml
  configuration:
    # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
    map-underscore-to-camel-case: true
    # 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true
    cache-enabled: false
    #懒加载
    aggressive-lazy-loading: true
    #NONE：不启用自动映射 PARTIAL：只对非嵌套的 resultMap 进行自动映射 FULL：对所有的 resultMap 都进行自动映射
    auto-mapping-behavior: partial
    #NONE：不做任何处理 (默认值)WARNING：以日志的形式打印相关警告信息 FAILING：当作映射失败处理，并抛出异常和详细信息
    auto-mapping-unknown-column-behavior: none
    #如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  global-config:
    db-config:
      #表名下划线命名默认true
      table-underline: true
      #id类型  #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
      id-type: ASSIGN_ID
      #逻辑已删除值,(逻辑删除下有效) 需要注入逻辑策略LogicSqlInjector 以@Bean方式注入
      logic-not-delete-value: 0
      #逻辑未删除值,(逻辑删除下有效)
      logic-delete-value: 1